<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="http://localhost:4000/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.3.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2017-01-30T01:11:05+07:00</updated><id>http://localhost:4000//</id><title type="html">Your awesome title</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
</subtitle><entry><title type="html">Javascripts 101: สูงสุดสู่สามัญ</title><link href="http://localhost:4000/javascripts/framework/2017/01/16/js101" rel="alternate" type="text/html" title="Javascripts 101: สูงสุดสู่สามัญ" /><published>2017-01-16T02:15:41+07:00</published><updated>2017-01-16T02:15:41+07:00</updated><id>http://localhost:4000/javascripts/framework/2017/01/16/js101</id><content type="html" xml:base="http://localhost:4000/javascripts/framework/2017/01/16/js101">&lt;p&gt;บทความนี้เราจะมาปูพื้นฐานความเข้าใจใน js framework สำหรับยุคนี้กันครับ ทุกวันนี้ทุกคนก็คงใช้ js framework ในการทำ webapp กันอยู่แล้ว แต่หากเราจะต้องสร้างมันขึ้นมาเองละ!! จำเป็นต้องรู้อะไรบ้าง แนวทางการสร้างสำหรับยุคนี้คืออะไร เดี๋ยวมาดูกันครับ&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;บทความนี้แค่ต้องการแชร์ความรู้จากการลองผิดลองถูกของทางผู้เขียนเท่านั้น ทางผู้เขียนไม่ได้มีความชำนาญหรือเคยเข้าร่วมเขียน framework ใดๆมาก่อน หากมีข้อผิดพลาดอะไรสามารถชี้แนะได้เลยนะครับ จะขอบพระคุณเป็นอย่างสูงครับ :)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;basic-concept&quot;&gt;Basic concept&lt;/h3&gt;

&lt;h3 id=&quot;implementation-a-simple-way&quot;&gt;Implementation a simple way&lt;/h3&gt;

&lt;h4 id=&quot;syntax&quot;&gt;Syntax&lt;/h4&gt;

&lt;h5 id=&quot;js&quot;&gt;JS&lt;/h5&gt;

&lt;h5 id=&quot;template&quot;&gt;Template&lt;/h5&gt;

&lt;h4 id=&quot;template-1&quot;&gt;Template&lt;/h4&gt;

&lt;h5 id=&quot;parsing-html-dom&quot;&gt;Parsing HTML DOM&lt;/h5&gt;

&lt;h5 id=&quot;binding-data&quot;&gt;Binding data&lt;/h5&gt;

&lt;h5 id=&quot;binding-model&quot;&gt;Binding model&lt;/h5&gt;

&lt;h5 id=&quot;binding-event&quot;&gt;Binding event&lt;/h5&gt;

&lt;h4 id=&quot;runup&quot;&gt;Runup&lt;/h4&gt;

&lt;h3 id=&quot;virtual-dom&quot;&gt;Virtual DOM&lt;/h3&gt;

&lt;h4 id=&quot;concept&quot;&gt;Concept&lt;/h4&gt;

&lt;h4 id=&quot;implementation&quot;&gt;Implementation&lt;/h4&gt;

&lt;h3 id=&quot;example&quot;&gt;Example&lt;/h3&gt;</content><summary type="html">บทความนี้เราจะมาปูพื้นฐานความเข้าใจใน js framework สำหรับยุคนี้กันครับ ทุกวันนี้ทุกคนก็คงใช้ js framework ในการทำ webapp กันอยู่แล้ว แต่หากเราจะต้องสร้างมันขึ้นมาเองละ!! จำเป็นต้องรู้อะไรบ้าง แนวทางการสร้างสำหรับยุคนี้คืออะไร เดี๋ยวมาดูกันครับ</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://unsplash.it/850/360" /></entry><entry><title type="html">ลองสร้าง Frontend เฟรมเวิร์คแบบง่ายๆ</title><link href="http://localhost:4000/javascripts/framework/2017/01/16/jsframework101" rel="alternate" type="text/html" title="ลองสร้าง Frontend เฟรมเวิร์คแบบง่ายๆ" /><published>2017-01-16T02:15:41+07:00</published><updated>2017-01-16T02:15:41+07:00</updated><id>http://localhost:4000/javascripts/framework/2017/01/16/jsframework101</id><content type="html" xml:base="http://localhost:4000/javascripts/framework/2017/01/16/jsframework101">&lt;p&gt;บทความนี้เราจะมาปูพื้นฐานความเข้าใจใน js framework สำหรับยุคนี้กันครับ ทุกวันนี้ทุกคนก็คงใช้ js framework ในการทำ webapp กันอยู่แล้ว แต่หากเราจะต้องสร้างมันขึ้นมาเองละ!! จำเป็นต้องรู้อะไรบ้าง แนวทางการสร้างสำหรับยุคนี้คืออะไร เดี๋ยวมาดูกันครับ&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;บทความนี้แค่ต้องการแชร์ความรู้จากการลองผิดลองถูกของทางผู้เขียนเท่านั้น ทางผู้เขียนไม่ได้มีความชำนาญหรือเคยเข้าร่วมเขียน framework ใดๆมาก่อน หากมีข้อผิดพลาดอะไรสามารถชี้แนะได้เลยนะครับ จะขอบพระคุณเป็นอย่างสูงครับ :)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;basic-concept&quot;&gt;Basic concept&lt;/h3&gt;

&lt;h3 id=&quot;implementation-a-simple-way&quot;&gt;Implementation a simple way&lt;/h3&gt;

&lt;h4 id=&quot;syntax&quot;&gt;Syntax&lt;/h4&gt;

&lt;h5 id=&quot;js&quot;&gt;JS&lt;/h5&gt;

&lt;h5 id=&quot;template&quot;&gt;Template&lt;/h5&gt;

&lt;h4 id=&quot;template-1&quot;&gt;Template&lt;/h4&gt;

&lt;h5 id=&quot;parsing-html-dom&quot;&gt;Parsing HTML DOM&lt;/h5&gt;

&lt;h5 id=&quot;binding-data&quot;&gt;Binding data&lt;/h5&gt;

&lt;h5 id=&quot;binding-model&quot;&gt;Binding model&lt;/h5&gt;

&lt;h5 id=&quot;binding-event&quot;&gt;Binding event&lt;/h5&gt;

&lt;h4 id=&quot;runup&quot;&gt;Runup&lt;/h4&gt;

&lt;h3 id=&quot;virtual-dom&quot;&gt;Virtual DOM&lt;/h3&gt;

&lt;h4 id=&quot;concept&quot;&gt;Concept&lt;/h4&gt;

&lt;h4 id=&quot;implementation&quot;&gt;Implementation&lt;/h4&gt;

&lt;h3 id=&quot;example&quot;&gt;Example&lt;/h3&gt;</content><summary type="html">บทความนี้เราจะมาปูพื้นฐานความเข้าใจใน js framework สำหรับยุคนี้กันครับ ทุกวันนี้ทุกคนก็คงใช้ js framework ในการทำ webapp กันอยู่แล้ว แต่หากเราจะต้องสร้างมันขึ้นมาเองละ!! จำเป็นต้องรู้อะไรบ้าง แนวทางการสร้างสำหรับยุคนี้คืออะไร เดี๋ยวมาดูกันครับ</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://unsplash.it/850/360" /></entry><entry><title type="html">Docker 101: Basic &amp;amp; Overview</title><link href="http://localhost:4000/devops/docker/2017/01/16/docker101" rel="alternate" type="text/html" title="Docker 101: Basic &amp; Overview" /><published>2017-01-16T02:15:41+07:00</published><updated>2017-01-16T02:15:41+07:00</updated><id>http://localhost:4000/devops/docker/2017/01/16/docker101</id><content type="html" xml:base="http://localhost:4000/devops/docker/2017/01/16/docker101">&lt;p&gt;Docker เป็น container ที่เราสามารถใช้สำหรับการเก็บทุกอย่างที่เราต้องใช้ในการรันแอพลิเคชันตั้งแต่ OS, Library, App โดยมีลักษณะคล้ายๆ VM แต่เบากว่า เนื่องจากมี layer น้อยกว่า VM เพื่อลงไปรันโค้ดที่ระดับ kernal&lt;/p&gt;

&lt;p&gt;ภาพเปรียบเทียบระหว่าง VM กับ Container&lt;/p&gt;

&lt;p&gt;แล้วมันจะมีประโยชน์อะไรกับการดีพลอยแอพลิเคชันของเราละ มาดูกัน&lt;/p&gt;

&lt;h4 id=&quot;why-docker&quot;&gt;Why Docker&lt;/h4&gt;

&lt;p&gt;เคยเจอปัญหาดีพลอยแอพลิเคชันขึ้นบนเซิฟเวอร์แล้วเจอปัญหาในการรันหรือเปล่า เช่น version php ไม่ตรงกับที่ต้องการ , ไม่สามารถอัพเดตได้ เพราะมีแอพอื่นรันอยู่ หรือเทสบนเครื่องเสร็จแล้วใช้งานได้ปกติ แต่พอดีพลอยจริงแล้วเกิดปัญหาสารพัด&lt;/p&gt;

&lt;p&gt;ปัญหานี้จะหมดไปเพียงแค่เราใช้ docker เนื่องจากเราสามารถ&lt;/p&gt;

&lt;h3 id=&quot;get-stated&quot;&gt;Get Stated&lt;/h3&gt;

&lt;h4 id=&quot;install-docker-engine&quot;&gt;Install Docker Engine&lt;/h4&gt;

&lt;p&gt;วิธีลงก็แสนง่ายดาย เดี๋ยวเราจะมาลองลงเล่นในเครื่องเราก่อนแล้วกันนะครับ
ผมใช้ osx อยู่ วิธีการลงก็มีวิธีง่ายๆแค่ไปโหลดมาซะ&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;Download Docker OSX Installer&quot;&gt;https://www.docker.com/products/docker#/mac&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ลงเสร็จก็เข้า terminal เลยครับ อยู่ตรงแยกอโศก เอ้ย รัน cmd ง่ายๆ&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;ลองดูกันก่อนว่าใช้เวอร์ชันอะไร&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker --version&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;เท่านี้ก็มี docker ในเครื่องแล้วครับ ต่อไปจะไปลองเล่นกัน&lt;/p&gt;

&lt;h4 id=&quot;docker-images&quot;&gt;Docker Images&lt;/h4&gt;

&lt;p&gt;เราเห็นกันไปในหัวข้อก่อนแล้วว่าเราจะทำการ pack ทุกอย่างที่จำเป็นในการรันแอพลิเคชันของเราด้วย docker ซึ่งพอเราแพคเสร็จ มันก็จะออกมาเป็น Docker Images เนี่ยละ แล้วก็สามารถเอา Images ตัวเนี่ย ไปรันที่ไหนก็ได้ที่มี docker อยู่&lt;/p&gt;

&lt;p&gt;ซึ่งตัว Docker Images เนี่ยก็มีตัวสำเร็จรูปที่คนอื่นทำไว้แล้วให้เราสามารถโหลดมาใช้และเล่นได้เลยเหมือน ซึ่งจะถูกเก็บไว้บน Docker Hub ซึ่งเป็น Repository สำหรับการเก็บ Docker Images ส่วนกลางๆ คล้ายๆเราใช้ git แล้วเราเก็บโค้ดไว้บน github หรือ bitbucket เลย&lt;/p&gt;

&lt;p&gt;เราสามารถเข้าดึง public docker images มาเล่นได้ หรือจะสมัคร account แล้วใช้เก็บ docker images ที่เราสร้างขึ้นมาก็ได้เช่นกัน&lt;/p&gt;

&lt;h4 id=&quot;pull-images&quot;&gt;Pull Images&lt;/h4&gt;

&lt;p&gt;เราจะมาลองดึง Docker Images ที่มีอยู่บน Docker Hub มาเล่นง่ายๆกันก่อนนะครับ
ในตัวอย่างผมจะลองไปดึง &lt;code class=&quot;highlighter-rouge&quot;&gt;ubuntu&lt;/code&gt; images มาแล้วรัน hello world ง่ายๆ&lt;/p&gt;

&lt;p&gt;ก่อนอื่นเริ่มจาก pull ลงมาก่อน ด้วยคำสั่ง &lt;code class=&quot;highlighter-rouge&quot;&gt;docker pull [image]&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker pull ubuntu
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;มาดูกันว่ามันลงมาอยู่ที่เครื่องเราหรือยัง รันคำสั่ง&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker images
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;ก็จะเห็นรายชื่อ images ทั้งหมดที่มีอยู่บนเครื่องเรานะครับ นั่นไง ubuntu มาแล้ว&lt;/p&gt;

&lt;h4 id=&quot;run-images&quot;&gt;Run Images&lt;/h4&gt;

&lt;p&gt;เมื่อทำการ pull images มาแล้ว ก็สั่งรันได้เลย ด้วยคำสั่ง &lt;code class=&quot;highlighter-rouge&quot;&gt;docker run [image] [cmd ....]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;เราจะลองรัน ubuntu จากนั้นรัน echo “hello world” ใน container ตัวนั้นนะครับ&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run ubuntu echo &quot;hello world&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;จะเห็นได้ว่ามันทำการรัน images ที่ชื่อ ubuntu จากนั้นรันคำสั่ง echo “hello world” ใน container จากนั้นก็ exit ออกมา เพราะจบการทำงานแล้ว&lt;/p&gt;

&lt;p&gt;ทีนี้มาดูกันว่าเรารัน images อะไรไปแล้วบ้าง ด้วยคำสั่ง&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker ps -a
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;จะเห็นได้ว่า เรารัน image ubuntu ด้วย command “echo ‘hello world’”
เราจะเห็น column STATUS ที่แสดงสถานะว่าแอพเรายังรันอยู่ดีหรือเปล่านะครับ&lt;/p&gt;

&lt;h5 id=&quot;run-with-options&quot;&gt;Run with Options&lt;/h5&gt;

&lt;p&gt;เรามาดู Options ที่เราต้องใช้บ่อยๆในการรัน Docker Images กันก่อน&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-d&lt;/code&gt; หรือ deamon mode นั่งเอง มันจะทำการรันแบบ background process ครับ&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--name [name]&lt;/code&gt; เป็นการตั่งชื่อให้กับ container ที่กำลังรันอยู่นั่นเอง ( แสดงผลในคอลัมสุดท้าย หากไม่ตั้ง ตัว docker จะทำการสุ่มชื่อมาให้เราอัตโนมัติ )&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-p [HOST_PORT:CONTAINER_PORT]&lt;/code&gt; หรือ port เป็นการ binding port ระหว่าง host และ container เดี๋ยวจะอธิบายในหัวข้อถัดไปนะครับ&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-v [HOST_PATH:CONTAINER_PATH]&lt;/code&gt; หรือ volume เป็นการ binding path ของไฟล์บน host และ container ก็เดี๋ยวจะอธิบายในหัวข้อถัดไปอีกทีครับ&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;ที่ต้องใช้กันบ่อยๆในช่วงเริ่มต้นก็ประมานนี้ครับ&lt;/p&gt;

&lt;h5 id=&quot;network-mode&quot;&gt;Network Mode&lt;/h5&gt;

&lt;h5 id=&quot;volume&quot;&gt;Volume&lt;/h5&gt;

&lt;h4 id=&quot;build-images&quot;&gt;Build Images&lt;/h4&gt;

&lt;p&gt;เราสามารถ build images ของเราขึ้นมาเองได้ เช่น เราจะสร้าง images hello world ไว้ใช้งาน&lt;/p&gt;

&lt;h4 id=&quot;docker-hub&quot;&gt;Docker Hub&lt;/h4&gt;

&lt;p&gt;Docker Hub เป็น Docker Repository สำหรับเก็บ Docker Images ไว้บนคลาวได้ คล้ายกับ Github หรือ Bitbucket ที่เราใช้เก็บ Sourcecode&lt;/p&gt;

&lt;h3 id=&quot;dockerfile&quot;&gt;Dockerfile&lt;/h3&gt;

&lt;p&gt;เราทำการ build docker images ง่ายๆมาแล้ว
จะเห็นว่าเราต้องพิมตอนสร้างนั้นมีลำดับขั้นตอน
Docker จริงสร้างสิ่งที่เรีอยกว่า Dockerfile ขึ้นมา เป็นเหมือน instruction ในการสร้าง docker images ของเรา ว่าเราจำเป็นต้องรันอะไรบ้าง&lt;/p&gt;

&lt;p&gt;เช่น
1. ใช้ images ubuntu
2. git clone repo มาลง
3. รันแอพ&lt;/p&gt;

&lt;p&gt;ซึ่งคอมมานคร่าวๆก็จะประมานนี้&lt;/p&gt;

&lt;p&gt;FROM
RUN
CMD&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;process ที่เราจะรันใน cmd คอมมานสุดท้ายนั้นจะต้องเป็น foreground process เนื่องจาก docker จำเป็นต้อง track การรันที่ foreground process หากรันเป็น background docker จะไม่สามารถ track ได้และจะหยุดทำงานในทันที&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;เราจะมาลอง build nodejs app ง่ายๆด้วย forever &amp;amp; docker กันครับ&lt;/p&gt;

&lt;h4 id=&quot;build-images-1&quot;&gt;Build Images&lt;/h4&gt;

&lt;p&gt;คำสั่งในการรัน build docker images จาก dockerfile เราสามารถรันได้ด้วย&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker build -t [name] .
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;nodejs-app-example&quot;&gt;Nodejs App Example&lt;/h4&gt;

&lt;h3 id=&quot;docker-compose&quot;&gt;Docker Compose&lt;/h3&gt;

&lt;p&gt;docker compose ใช้สำหรับเก็บ command และ config ที่เราจะรันตัว docker images หากเราทำการรันแล้วครั้งครึ่ง เราจะไม่สามารถแก้คำสั่งรันได้ ทำได้แค่ start stop restart เท่านั้น แต่ docker compose เราสามารถแก้ไขไฟล์ config ตัวนั้นได้&lt;/p&gt;

&lt;p&gt;เราสามารถเขียนไฟล์ docker-compose ในรูปแบบของ yml ได้
โดยมีตัวอย่างเบื้องต้นง่ายๆดังนี้&lt;/p&gt;

&lt;h4 id=&quot;configuration&quot;&gt;Configuration&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;version: '2'
services:
	web:

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;เราสามารถ config ได้ตามคำสั่ง option ของการ run ปกติ เช่น volume ใช้ -v / port ใช้ -p
สามารถดู config อื่นๆได้ตามนี้&lt;/p&gt;

&lt;h4 id=&quot;runup-docker-compose&quot;&gt;Runup Docker Compose&lt;/h4&gt;
&lt;p&gt;asdjsadjs&lt;/p&gt;</content><summary type="html">Docker เป็น container ที่เราสามารถใช้สำหรับการเก็บทุกอย่างที่เราต้องใช้ในการรันแอพลิเคชันตั้งแต่ OS, Library, App โดยมีลักษณะคล้ายๆ VM แต่เบากว่า เนื่องจากมี layer น้อยกว่า VM เพื่อลงไปรันโค้ดที่ระดับ kernal</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://unsplash.it/850/360" /></entry></feed>
